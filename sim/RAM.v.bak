// Pretty much the same as the DE1 except writes are instantaneous instead of delayed
module RAM(address, clock, data, wren, q);
    parameter ADDR_WIDTH = 8;
    parameter DATA_WIDTH = 8;
    parameter DEPTH = 256;

    input [ADDR_WIDTH - 1:0] address;
    input clock;
    input [DATA_WIDTH - 1:0] data;
    input wren;
    output reg [DATA_WIDTH - 1:0] q;

    reg [DATA_WIDTH - 1:0] temp_data;
    reg [DATA_WIDTH - 1:0] mem [0:DEPTH-1];

    always @(posedge clock) begin
       if (wren) mem[address] <= data;
       
       q <= mem[address];
    end

endmodule

module decrypted_msg(address, clock, data, wren, q); // RAM
    parameter ADDR_WIDTH = 8;
    parameter DATA_WIDTH = 8;
    parameter DEPTH = 256;

    input [ADDR_WIDTH - 1:0] address;
    input clock;
    input [DATA_WIDTH - 1:0] data;
    input wren;
    output reg [DATA_WIDTH - 1:0] q;

    reg [DATA_WIDTH - 1:0] temp_data;
    reg [DATA_WIDTH - 1:0] mem [0:DEPTH-1];

    always @(posedge clock) begin
       if (wren) mem[address] <= data;
       
       q <= mem[address];
    end

endmodule


module encrypted_msg(address, clock, q); // ROM
    parameter ADDR_WIDTH = 8;
    parameter DATA_WIDTH = 8;
    parameter DEPTH = 32;

    input [ADDR_WIDTH - 1:0] address;
    input clock;
    parameter logic [DATA_WIDTH - 1:0] data [DEPTH - 1:0] = 
    {
        8'd45,
        8'd143,
        8'd122,
        8'd169,
        8'd56,
        8'd115,
        8'd95,
        8'd135,
        8'd69,
        8'd27,
        8'd130,
        8'd134,
        8'd75,
        8'd155,
        8'd127,
        8'd157,
        8'd239,
        8'd13,
        8'd196,
        8'd187,
        8'd249,
        8'd119,
        8'd153,
        8'd117,
        8'd255,
        8'd213,
        8'd96,
        8'd115,
        8'd1,
        8'd248,
        8'd22
    };
    output reg [DATA_WIDTH - 1:0] q;

    reg [DATA_WIDTH - 1:0] temp_data;
    reg [DATA_WIDTH - 1:0] mem [0:DEPTH-1];

    always @(posedge clock) begin
       q <= mem[address];
    end

endmodule

